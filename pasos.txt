	==============
	NOTAS
	==============

	>> send
	
	Events
	-------
	The SendStream is an event emitter and will emit the following events:

	* error: an error occurred (err)
	* directory: a directory was requested (res, path)
	* file: a file was requested (path, stat)
	* headers: the headers are about to be set on a file (res, path, stat)
	* stream: file streaming has started (stream)
	* end: streaming has completed
	
	.pipe
	------
	The pipe method is used to pipe the response into the Node.js HTTP response object, typically send(req, path, options).pipe(res).

	>> Pagina de ayuda para manejo de PUG

	https://gist.github.com/joepie91/c0069ab0e0da40cc7b54b8c2203befe1
	

	==================================================================================================================

	Paso 1 - Crear package.json 

	Mediante el comando $ npm init


	==================================================================================================================

	Paso 2 - instalar express 

	npm install express --save

	==================================================================================================================

	Paso 3 - crear un servidor basico que nos responde hola mundo


	==================================================================================================================

	Paso 4 - Se instala PUG el nuevo motor de vistas 

	Antes se llamaba JADE con:
	1- npm install pug --save 
	2- npm install pug-cli -g --save


	==================================================================================================================

	Paso 5 - Se crean interfaz de usuario con paquete pug (antes jade) 

	Se creo layout.pug para colocar encambezados 

	Este archivo contiene la estructura html con sintaxis de 'pug'


	==================================================================================================================

	Paso 6 - Crear rutas 

	En el archivo principal del servidor en app.get(ruta)

	==================================================================================================================

	Paso 7 - Instalar "body-parser"

	7.1 npm install body-parser --save
	Instalar este paquete para poder leer los parámetros enviados por el formulario
	usando el método POST

	7.2 require("body-parser")

	7.3 Montar el middleware  app.use()
	se necesita para peticiones json => app.use(bodyParser.json())
	y para decodificar las url => app.use(bodyParser.urlencoded({extended: true}))
		- extended: true = se puede parsear arreglos y muchos más
		- extended: false = es limitado la opción de parseo

	Para poder leer los parametros se va a tener en cuenta el atributo "name" de las etiquetas

	==================================================================================================================

	Paso 8 - Instalar motor base de datos MongoDB 

	Almacena datos en formato JSON, basado en documentos

	8.1 Instalar MongoDB 

	Para windows - descargar el instalador y seguir las instrucciones (ejecutar instalador)

	Se hará uso de "mongoose" es un ORM (Object Relational Mapping) Mapea de Modelo relacional a objetos
	mediante una API "ofusca" los datos

	8.2 Instalar mongoose => npm mongoose --save
	
	para llamar a este paquete que facilitará la conexión con los datos de mongo ya que serán más legibles
	var mongoose = require('mongoose')

	8.3 Como ejemplo nos vamos a conectar a 'localhost'

	mongoose.connect('mongodb://localhost/page')

	8.4 Tipos de datos y uso de esquemas

	Se trabaja con documentos, es decir, objetos JSON
	Se debe trabajar con 'Schema' de mogoose => Schema = mongoose.Schema, sirve para crear un modelo
	para mapear el objeto o registro
	
	8.5 Conectar a una base de datos

	mongoose.connect('mongodb://localhost/<directorio>')

	==================================================================================================================

	Paso 9 - Schemas y Modelos

	Los esquemas son las estructura de nuestros datos en MogoDB

	9.1 Tipos de datos en MongoDB

	Los valores pueden ser de seis tipos:
	- String o cadena.
	- Number o número.
	- Boolean o booleano (true o false)
	- null.
	- Array.
	- Objeto o documento, es decir un objeto JSON puede contener otro documento JSON, 
	   sin límite de recursividad.
	- Buffer
	- Mixed

	Ver: https://docs.mongodb.com/manual/reference/bson-types/

	Ej: Esquema de usuario

	var user_schema = User {
		email: String,
		password: password
	}

	9.2 Modelos: estos deben estar en la carpeta 'models'

	Son instancias para hacer llamados a la base de datos

	// En la bd debe exisitir la entidad en plural
	var entidad = mongoose.model('<entidad_en_singular>', <schema>) 

	Ej:  var User = mongoose.model('User',user_schema)

	// Se debe exportar el modelo
	module.exports.User = User

	Finalmente en el 'Main' importarmos o solicitamos el modelo
	var User = require('./models/user').User

	==================================================================================================================

	Paso 10 - Virtuals y Validaciones

	Paso 10.1 - Virtuals

	Se usan cuando se deben realizar validaciones a los campos y una buena práctica es 
	hacerlas en los Schema. NO en frontend ni Schemas

	Ejemplo para validad un campo de confirmación de contraseña o correo electrónico
	En vez de crear en el esquema dos variables de correo electrónico, se hace con un
	campo 'virtual'

	10.2 Validaciones

	=> Se deben hacer a nivel de Schema

	=> Los errores se deben manejar al momento de almacenar en la base de datos, mediante el
	callback    <entidad>.save( function(error) {<manejo de errores} )
	Generalmente va en el Main

	Primero validar los datos en Schema

	10.2.1 Uso de 'validate' en el Schema

	== Opción 1

	var User = new mongoose.Schema ({
		nombre: {type: String, required: true},
		password: {	type: String, 
					required: true,
					minlength: [8, 'La contraseña no debe ser menor a 8 caracteres']
					validate: {
						validator: function(passw) {
							// Siempre debe retornar, para validar si cumple o no
							return this.passw.length >= 8   
						},
						message: 'La contraseña es muy corta'
					}
				}
		})

	Colocar la validación fuera del esquema
	var validacion_password = {
								validator: function(passw) {
									// Siempre debe retornar, para validar si cumple o no
									return this.passw.length >= 8   
								},
								message: 'La contraseña es muy corta'
							}

	== Opción 2

	var User = new mongoose.Schema ({
		nombre: {type: String, required: true},
		password: {	type: String, 
					required: true,
					minlength: [8, 'La contraseña no debe ser menor a 8 caracteres'],
					validate: validacion_password
				}
	})
	
	===================================================================================================================

	Paso 11 - Mongoose save

	Guardar el objeto en la base de datos, se necesita un modelo Ej. Estudiante que ya lo tenemos

	var estudiante = new Estudiante({....})		 // Parametro es el objeto JSON

	estudiante.save(callback)

	// Estructura y parámetros
	estudiante.save( function(error, estudiante, numero) {
		// No crea objetos sino que actualiza, sobreescribe
		error: recibe el error generado al guardar
		estudiante: objeto ya guardado
		numero: cantidad de filas afectadas
	})

	Actualmente se usa 'promises' o promesas, significa que en vez de retornar un callback, recibe una promesa
	y se debe ejecutar el metodo '.then( function(usr) {
		.....
		// 'guardado correctamente'		
		obj.send('Se guardo correctamente')
	}, function(error) {
		if(error) {
			.......
			// 'no se logró guardar'
			Ej: console.log(String(err))
			obj.send('No se pudo guardar en la base de datos')
		}
	})'

